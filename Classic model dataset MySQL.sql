use classicmodels;

show tables;


-- Find the top 10 customers who have placed the most orders. Display customer name and the count of orders place

SELECT c.customername, 
       (SELECT COUNT(od.quantityOrdered) 
        FROM orderdetails od
        JOIN orders o ON o.ordernumber = od.ordernumber
        join customers on o.customernumber = c.customernumber) AS order_count
FROM customers c
ORDER BY order_count DESC
LIMIT 10;



-- Retrieve the list of customers who have placed orders but haven't made any payments yet.

select c.customerName from customers c
where ( select o.orderNumber 
		from orders o 
        where (select p.amount
               from payments p
               where amount is null))
group by 1;

-- Retrieve a product that has been ordered the least number of times. Display the product code,
-- product name, and the number of times it has been ordered.
  
 SELECT 
    productcode,
    productname,
    (SELECT 
            min(quantityOrdered)
        FROM
            orderdetails od) AS order_count
FROM
    products p
GROUP BY productcode
ORDER BY order_count  asc
limit 1;





-- Classic Models has a product line called "Vintage Cars." 
-- The management wants to know the total revenue generated by this product line in
--  the last quarter of the year 2003 (from October to December). Write a MySQL 
-- stored procedure that takes no input parameters and returns total revenue of the "Vintage Cars"
--  product line for the last quarter of 2003.

DELIMITER $$

CREATE PROCEDURE CalculateVintageCarsRevenue()
BEGIN
  SELECT p.productLine, SUM(od.priceEach * od.quantityOrdered) AS totalRevenue
  FROM products p
  JOIN orderdetails od ON p.productCode = od.productCode
  JOIN orders o ON od.orderNumber = o.orderNumber
  WHERE p.productLine = 'Vintage Cars'
    AND o.orderDate >= '2003-10-01' AND o.orderDate <= '2003-12-31'
  GROUP BY p.productLine;
END $$

DELIMITER ;


CALL CalculateVintageCarsRevenue();

--  Write an SQL query using CTE's and window functions inside it to retrieve 
-- the top 5 customers along with their total order values across all orders.

    with CustomerTotalOrders AS 
    (SELECT c.customername, sum(od.quantityordered * od.priceeach) as orderValue,
 rank() over (order by sum(od.quantityordered * od.priceeach) desc ) as Rankedtop5customer
  from customers c
  join orders o on o.customernumber = c.customernumber
 join orderdetails od on od.ordernumber = o.ordernumber
 group by 1
 order by orderValue desc
 limit 5
 )
 
 select * from customertotalorders;
   
   
select * from customers;

select * from customers where length(contactFirstName) regexp '2';
   
   
   --                             END